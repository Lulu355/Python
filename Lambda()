---
title: "lambda()"
tags: "filter,map(),reduce(),sort()"
---

# Lambda

The lambda keyword is used to create anonymous functions. Lambda function can have any number of arguments but has only one expression

## Cube using lambda

    cube = lambda x: x * x*x   
    print(cube(7)) 

## List comprehension using lambda

a = [(lambda x: x * 2)(x) for x in range(5)] 
print(a) 

## Using Lambda with filter()

The filter() function in Python takes in a function and a list as arguments. 
This offers an elegant way to filter out all the elements of a sequence “sequence”, for which the function returns True
筛去return False 的数

code

    li = [5, 7, 22, 97, 54, 62, 77, 23, 73, 61] 
    final_list = list(filter(lambda x: (x%2 != 0) , li)) 
    OUTPUT: [5, 7, 97, 77, 23, 73, 61]

## Using Lambda with map()

将列表中的数按特定函数中内容修改

Code

    li = [5, 7, 22, 97, 54, 62, 77, 23, 73, 61] 
    final_list = list(map(lambda x: x*2 , li)) 
    print(final_list) 

    OUTPUT [10, 14, 44, 194, 108, 124, 154, 46, 146, 122]

## Using Lambda with reduce()

将列表中的数字循环运行
Coding

    from functools import reduce
    li = [5, 8, 10, 20, 50, 100] 
    sum = reduce((lambda x, y: x + y), li) 
    print (sum) 
    OUTPUT：193 （(((((5+8)+10)+20)+50)+100)）

### Sort the list according to the column using lambda

将一个nested list 按某个column 排序

    lst = [[1,2,3], [4,3,2],[2,3,4]]
    lst = sorted(lst, key = lambda x: x[1])

先将一个dictionary 按value 倒序排列， 在按key 升序排列

    d = {"A": 3, "C": 4, "B": 4}
    sort_key = sorted(d)
    sort_value = sorted(d, lamda x: x[1], reverse = True)
    OUTPUT
    [("B", 2), ("C", 4), ("A", 3)]

## 根据value 排 dictionary

    d = {'lilee':25, 'wangyan':21, 'liqun':32, 'age':19}
    sorted(d.items(), key=lambda item:item[1])
    OUTPUT
    [('age',19),('wangyan',21),('lilee',25),('liqun',32)]
